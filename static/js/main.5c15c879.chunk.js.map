{"version":3,"sources":["components/socket.tsx","components/Map.tsx","App.tsx","components/InfoTypes.tsx","reportWebVitals.ts","index.tsx"],"names":["socket","io","path","on","console","log","connected","truckIcon","L","icon","iconUrl","iconSize","truckIcon1","trucksIcons","Array","startIcon","destinationIcon","App","useState","trucks","setTrucks","trucksInfo","setTrucksInfo","trucksStatus","setTrucksStatus","truckToFix","setTruckToFix","chat","setChat","mensaje","setMensaje","username","setUsername","useEffect","emit","trucksInfoUpdated","failureInfo","source","concat","failedTruck","find","found","code","secondaryList","indexOf","msj","date","Date","toString","message","name","fixInfo","newStatus","fixedTruck","min","max","newTruck","position","iconInt","Math","floor","random","newTruckStatus","sameTruck","off","className","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","map","camion","Marker","Popup","trayecto","Polyline","positions","origin","destination","onSubmit","e","preventDefault","type","value","placeholder","onChange","target","MensajeEnviar","handleSendChat","info","truck","engine","capacity","fix","handleFixTruck","onClick","staff","persona","age","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c15c879.chunk.js","sourcesContent":["import { io } from \"socket.io-client\";\r\n\r\nconst socket = io(\"wss://tarea-3-websocket.2021-2.tallerdeintegracion.cl\", {\r\n  path: \"/trucks/\",\r\n});\r\n\r\nsocket.on(\"connect\", function() {\r\n  console.log('check connection', socket.connected)\r\n});\r\n\r\nexport default socket;","import L from 'leaflet'\r\n\r\nvar truckIcon = L.icon({\r\n    iconUrl: 'https://sunshine-autos.ucoz.com/_ld/0/75951138.png',\r\n    iconSize:     [58, 49], \r\n  });\r\n\r\nvar truckIcon1 = L.icon({\r\n    iconUrl: 'https://i.imgur.com/puSMlJB.png',\r\n    iconSize:     [58, 49], \r\n  });\r\n\r\n\r\nexport var trucksIcons = new Array();\r\ntrucksIcons[0] = truckIcon;\r\ntrucksIcons[1] = truckIcon1;\r\n\r\n\r\nexport var startIcon = L.icon({\r\n    iconUrl: 'https://pixelartmaker-data-78746291193.nyc3.digitaloceanspaces.com/image/18e8ade00a66467.png',\r\n    iconSize: [45,30],\r\n});\r\n\r\nexport var destinationIcon = L.icon({\r\n    iconUrl: 'https://cdn.picpng.com/flag/flag-icon-flag-icon-destination-53089.png',\r\n    iconSize: [45,30],\r\n});","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport {MapContainer, TileLayer, Marker, Popup, Polyline} from 'react-leaflet'\r\nimport socket from \"./components/socket\"\r\nimport {TruckInfo, TruckStatus, TruckPos, getRandomInt, failureInfo, chatMessage } from './components/InfoTypes';\r\nimport {trucksIcons, startIcon, destinationIcon} from './components/Map';\r\nimport { stringify } from 'querystring';\r\nimport { debug, info } from 'console';\r\n\r\nfunction App() {\r\n  // Camiones\r\n  const [trucks, setTrucks] = useState<TruckPos[]>([]);\r\n  const [trucksInfo, setTrucksInfo] = useState<TruckInfo[]>([]);\r\n  const [trucksStatus, setTrucksStatus] = useState<TruckStatus[]>([]);\r\n  const [truckToFix, setTruckToFix] = useState(\"\")\r\n\r\n\r\n\t// CHAT\r\n\tconst [ chat, setChat ] = useState<chatMessage[]>([])\r\n  const [mensaje, setMensaje] = useState(\"\")\r\n\r\n  const [username, setUsername] = useState(\"defaultUsername\")\r\n\r\n  useEffect(() => {\r\n    socket.emit('TRUCKS');\r\n    socket.emit('CHAT');\r\n    // socket.emit('FIX'); DEBE PODER EMITIRSE Y ARREGLAR EL CAMION -> \r\n\r\n    socket.on('TRUCKS', trucksInfoUpdated => { // Posiciones de los camiones\r\n      //console.log(trucksInfoUpdated);\r\n      setTrucksInfo(trucksInfoUpdated);\r\n    });\r\n    \r\n    socket.on('FAILURE', (failureInfo: {code: string, source:string}) => {\r\n      //console.log(failureInfo);\r\n      failureInfo.source = \"Falla de \".concat(failureInfo.source);\r\n      // Crear otro useState con una lista que tenga code y status solamente, luego mapear eso en render\r\n      var failedTruck = trucksStatus.find(found => found.code === failureInfo.code)!\r\n      if (typeof(failedTruck) !== \"undefined\") { \r\n        var secondaryList = trucksStatus;\r\n        secondaryList[secondaryList.indexOf(failedTruck)] = failureInfo;\r\n        setTrucksStatus(secondaryList);\r\n      }else{\r\n        setTrucksStatus([...trucksStatus, failureInfo])\r\n      }\r\n    })\r\n\r\n    socket.on('CHAT', (mensaje: {date:string, message: string, name: string})=>{\r\n      //console.log(mensaje);\r\n      var realDate = new Date(mensaje.date);\r\n      const msj = {\r\n        date: realDate.toString(),\r\n        message: mensaje.message,\r\n        name: mensaje.name\r\n      }\r\n      setChat([...chat, msj])\r\n    })\r\n    \r\n    socket.on('FIX', (fixInfo: {code: string}) => {\r\n      //console.log(fixInfo);\r\n      \r\n      const newStatus = {\r\n        code: fixInfo.code,\r\n        source: 'OK',\r\n      }\r\n      var fixedTruck = trucksStatus.find(found => found.code === fixInfo.code)!\r\n      var secondaryList = trucksStatus;\r\n      secondaryList[trucksStatus.indexOf(fixedTruck)] = newStatus;\r\n      setTrucksStatus(secondaryList);\r\n\r\n    })\r\n    \r\n    socket.on('POSITION', mensaje => {\r\n      //sole.log(mensaje);\r\n      const newTruck = {\r\n        code: mensaje.code,\r\n        position: mensaje.position,\r\n        iconInt: getRandomInt(0,2),\r\n      }\r\n      const newTruckStatus = {\r\n        code: mensaje.code,\r\n        source: \"OK\",\r\n      }\r\n      var sameTruck = trucks.find(found => found.code === newTruck.code);\r\n      if (typeof(sameTruck) !== \"undefined\") { // si existe, actualizar datos\r\n        var secondaryList = trucks;           //updated list\r\n        secondaryList[secondaryList.indexOf(sameTruck)] = newTruck; //asignar\r\n        setTrucks(secondaryList);\r\n      }else{\r\n        setTrucksStatus([...trucksStatus, newTruckStatus])\r\n        setTrucks([...trucks, newTruck])\r\n      }\r\n    });\r\n\r\n\r\n    return () => {socket.off()}\r\n  }, [trucks, trucksInfo]);\r\n\r\n\r\n  const handleSendChat = () => {\r\n\r\n    const MensajeEnviar = {\r\n      message: mensaje,\r\n      name: username,\r\n    }\r\n    socket.emit(\"CHAT\", MensajeEnviar);\r\n    //setChat(prev => [...prev, {msj,name}]);\r\n\r\n    setMensaje(\"\");\r\n  };\r\n\r\n  const handleChangeUsername = () => {\r\n    setUsername(username);\r\n  }\r\n  \r\n\r\n  const handleFixTruck = () =>{\r\n    const fix = {\r\n      code: truckToFix\r\n    }\r\n    socket.emit('FIX', fix);\r\n    setTruckToFix(\"\");\r\n  }\r\n\r\n  return (\r\n\r\n    <>\r\n    <div className = \"overall\">\r\n      <div className=\"map\">\r\n      <MapContainer center={[-22, -68.5]} zoom={10} scrollWheelZoom={true}>\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n\r\n        {trucks.map((camion) => (\r\n          <Marker position={[camion.position[0],camion.position[1]]} icon = {trucksIcons[camion.iconInt]}>\r\n          <Popup>\r\n            {camion.code} \r\n          </Popup>\r\n          </Marker> \r\n        ))}\r\n\r\n        {trucksInfo.map((trayecto) => (\r\n          <>\r\n          <Polyline positions={[[trayecto.origin[0], trayecto.origin[1]],[trayecto.destination[0], trayecto.destination[1]]]} />\r\n          <Marker position={[trayecto.origin[0], trayecto.origin[1]]} icon = {startIcon}> <Popup> {trayecto.code} </Popup> </Marker>  \r\n          <Marker position={[trayecto.destination[0], trayecto.destination[1]]} icon = {destinationIcon}> <Popup>{trayecto.code}</Popup></Marker>\r\n          </>\r\n        ))}\r\n      </MapContainer>\r\n      </div>\r\n      \r\n      <div className= \"chat-box\">\r\n        <p className=\"p1\"> Chat </p>\r\n        <br/>\r\n        \r\n        <p> Nombre de usuario: </p>\r\n        <form onSubmit={e => {\r\n          e.preventDefault()\r\n          handleChangeUsername();\r\n        }}>\r\n          <input \r\n            type=\"text\" \r\n            value= {username} \r\n            placeholder= 'Username' \r\n            onChange = {e=> setUsername(e.target.value)}\r\n          />\r\n          <button type= \"submit\"> Cambiar </button>\r\n        </form>\r\n        \r\n        <div className= \"chat-container\">\r\n          {chat.map((mensaje)=>\r\n          <div className=\"msj-container\"> \r\n            <div><p className = \"user-name\"> {mensaje.name} </p></div>\r\n            <div className=\"msj-text\">\r\n              <h3>{mensaje.message} </h3>\r\n              <p> Date: {mensaje.date} </p>\r\n              <br></br>\r\n            </div>\r\n          </div>\r\n          \r\n          )}\r\n          \r\n        </div>\r\n\r\n        <br/>\r\n        <form onSubmit= {e => {\r\n          e.preventDefault()\r\n          handleSendChat();\r\n        }}>\r\n          <input\r\n            type= \"text\"\r\n            value = {mensaje}\r\n            placeholder= 'Ingresa un mensaje'\r\n            onChange= {e => setMensaje(e.target.value)}\r\n          />\r\n          <button type= \"submit\"> ENVIAR </button>\r\n        </form>\r\n      </div>\r\n\r\n      <div className=\"infobox\">\r\n        <p className=\"p1\"> Información de los camiones</p>\r\n        <br/>\r\n        <div className=\"card-container\">\r\n        {trucksInfo.map((info)=>\r\n          \r\n          <div className=\"card\">\r\n            <div className=\"card-title\"><h1> Codigo: {info.code}</h1></div>\r\n\r\n            <div className='truckinfo-text'>\r\n              <div><h3> Truck: {info.truck}</h3></div>\r\n              <div><h3> Engine: {info.engine}</h3></div>\r\n              <div><h3> Capacidad: {info.capacity}</h3></div>\r\n              <div><h3> Origen: {info.origin}</h3></div>\r\n              <div><h2>Destino: </h2><h3> {info.destination}</h3></div>\r\n              <div><h3> Estatus: {\r\n                trucksStatus.find(found => found.code === info.code)?.source \r\n                }</h3>\r\n                <form\r\n                  onSubmit={e => {\r\n                    e.preventDefault()\r\n                    handleFixTruck()\r\n                  }}\r\n                >\r\n                <button \r\n                  onClick={e => setTruckToFix(info.code)}\r\n                  type=\"submit\"> FIX </button>\r\n                </form>\r\n              </div>\r\n              <h2> Operadores</h2>\r\n              {info.staff.map((persona)=>\r\n              <div><h3> {persona.name}, {persona.age} años</h3></div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  </>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","\r\n\r\ninterface people {\r\n  name: string;\r\n  age: number;\r\n}\r\n  \r\ninterface chatMessage {\r\n  date: string;\r\n  message: string;\r\n  name: string;\r\n}\r\n\r\ninterface failureInfo{\r\n  code: string;\r\n  source: string;\r\n}\r\n\r\ninterface TruckInfo {\r\n  code: string;\r\n  origin: number[];\r\n  destination: number[];\r\n  driver_name: string;\r\n  engine: string;\r\n  capacity: number;\r\n  status: string;\r\n  truck: string;\r\n  staff: people[];\r\n}\r\n\r\ninterface TruckStatus {\r\n  code: string;\r\n  source: string;\r\n}\r\n\r\ninterface TruckPos {\r\n  code: string;\r\n  position: number[];\r\n  iconInt: number;\r\n}\r\n\r\nexport function getRandomInt(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\nexport type { TruckInfo, TruckPos, chatMessage, failureInfo, TruckStatus}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}